import logging
import os
import json
import time
import re
import urllib3
import requests
import telebot
from enum import Enum
from telebot import types
from keyboard import create_interests_keyboard, create_time_keyboard, create_location_keyboard
from bot_api import create_tour_plan, create_tour_plan_with_data
from api_yandex import create_route_with_custom_style, geocode_to_coordinates
import config

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    filename='logs/bot.log',
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s %(message)s'
)
logger = logging.getLogger("bot")

level_name = os.getenv('LOG_LEVEL', 'INFO').upper()
try:
    logging.getLogger().setLevel(getattr(logging, level_name, logging.INFO))
    logger.info(f"Log level set to {level_name}")
except Exception:
    logger.info("Log level fallback to INFO")

TELEGRAM_BOT_TOKEN = getattr(config, 'TELEGRAM_BOT_TOKEN', '').strip()
if not TELEGRAM_BOT_TOKEN:
    logger.warning('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ config.py')
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN or 'invalid-token')


class BotState(Enum):
    START = 0
    WAITING_INTERESTS = 1
    ADDING_INTERESTS = 2  
    WAITING_TIME = 3
    WAITING_LOCATION = 4
    WAITING_GEOLOCATION = 5 
    WAITING_MANUAL_ADDRESS = 6 
    READY_TO_BUILD = 7 

user_states = {}
user_data = {}

def start_bot():
    session = requests.Session()
    session.verify = False
    bot.session = session
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...")
            try:
                bot_info = bot.get_me()
                logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
                logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                time.sleep(5)
                continue
            bot.infinity_polling(
                timeout=30,
                long_polling_timeout=30,
                none_stop=True,
                interval=1,
            )
        except requests.exceptions.ReadTimeout:
            logger.warning("–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except requests.exceptions.ConnectionError:
            logger.warning("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except requests.exceptions.SSLError as e:
            logger.error(f"SSL –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
        except Exception as e:
            logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)


def set_user_state(user_id, state):
    user_states[user_id] = state


def get_user_state(user_id):
    return user_states.get(user_id, BotState.START)
    

@bot.message_handler(commands=['start', 'hello', 'go'])
def start(message):
    user_id = message.from_user.id
    logger.info(f"/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    set_user_state(user_id, BotState.START)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "üöÄ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç",
        "‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
        "‚≠ê –ü—Ä–∏–º–µ—Ä—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤"
    ]
    markup.add(*[types.KeyboardButton(text) for text in buttons])
    
    bot.send_message(message.chat.id,
                     "üöÄ –ó–æ–≤–µ–º —Ç–µ–±—è –≤ –ø—É—Ç—å! \n \n –ë–æ—Ç –∫–æ–º–∞–Ω–¥—ã Zovozblch –Ω–∞ —Å–≤—è–∑–∏!\n \
–ú—ã –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –≤ —Ç–≤–æ–∏ –ª–∏—á–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è. –ù–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º —É–∂–µ –∂–¥—ë—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥–ª—è —Ç–µ–±—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç. \n \n ‚ú® –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: \n \n üìå –¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: –ü–µ—Ä–µ—á–∏—Å–ª–∏ –≤—Å—ë, —á—Ç–æ —Ç–µ–±—è —Ü–µ–ø–ª—è–µ—Ç (—Å—Ç—Ä–∏—Ç-–∞—Ä—Ç, –∏—Å—Ç–æ—Ä–∏—è, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –Ω–µ–æ–±—ã—á–Ω—ã–µ –∫–∞—Ñ–µ, –ª—É—á—à–∏–µ –ø–∞–Ω–æ—Ä–∞–º—ã –∏ —Ç.–¥.).\n ‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É: –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ—Å–≤—è—Ç–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫–µ? \n üß≠ –¢–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –û—Ç–∫—É–¥–∞ –Ω–∞—á–Ω—ë–º? (–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã). \n ü§© –ì–æ—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π? \
–ü–æ–≥—Ä—É–∂–∞–µ–º—Å—è! üåÜ", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üöÄ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
def handle_build_route(message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞")
    set_user_state(user_id, BotState.WAITING_INTERESTS)
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['interests'] = []
    
    markup = create_interests_keyboard()
    bot.send_message(
        user_id,
        "üìå –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã! –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n\n–í—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == BotState.WAITING_INTERESTS)
def handle_interests(message):
    user_id = message.from_user.id
    
    if message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        if not user_data[user_id]['interests']:
            bot.send_message(user_id, "‚ùå –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!")
            return
            
        set_user_state(user_id, BotState.WAITING_TIME)
        markup = create_time_keyboard()
        bot.send_message(
            user_id,
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_data[user_id]['interests'])}\n\n‚è∞ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É?",
            reply_markup=markup
        )
    elif message.text == "‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä":
        # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
        user_data[user_id]['interests'] = []
        bot.send_message(user_id, "üóëÔ∏è –í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω. –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∑–∞–Ω–æ–≤–æ:")
    else:
        interest = parse_single_interest(message.text)
        if interest and interest not in user_data[user_id]['interests']:
            user_data[user_id]['interests'].append(interest)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")
            bot.send_message(
                user_id, 
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {interest}\n\n–¢–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_data[user_id]['interests'])}\n\n–í—ã–±–µ—Ä–∏ –µ—â–µ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏ '‚úÖ –ì–æ—Ç–æ–≤–æ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
            )
        elif interest in user_data[user_id]['interests']:
            bot.send_message(user_id, f"‚ö†Ô∏è {interest} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω! –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        else:
            bot.send_message(user_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.")


@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == BotState.WAITING_TIME)
def handle_time(message):
    user_id = message.from_user.id
    
    time_value = parse_time(message.text)
    if time_value:
        user_data[user_id]['time'] = time_value
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∫–∞–∑–∞–ª –≤—Ä–µ–º—è: {time_value} —á")
        set_user_state(user_id, BotState.WAITING_LOCATION)
        
        markup = create_location_keyboard()
        bot.send_message(
            user_id,
            "üß≠ –û—Ç–∫—É–¥–∞ –Ω–∞—á–Ω–µ–º –ø—É—Ç—å?",
            reply_markup=markup
        )
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 —á–∞—Å–∞, 3.5 —á–∞—Å–∞)")


@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == BotState.WAITING_LOCATION)
def handle_location_choice(message):
    user_id = message.from_user.id
    
    if message.text == "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ":
        set_user_state(user_id, BotState.WAITING_GEOLOCATION)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        location_button = types.KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", request_location=True)
        cancel_button = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
        markup.add(location_button)
        markup.add(cancel_button)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        bot.send_message(
            user_id,
            "üìç –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º:",
            reply_markup=markup
        )
    elif message.text == "üéØ –¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞":
        user_data[user_id]['location'] = "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ø–ª–æ—â–∞–¥—å –ú–∏–Ω–∏–Ω–∞ –∏ –ü–æ–∂–∞—Ä—Å–∫–æ–≥–æ"
        set_user_state(user_id, BotState.READY_TO_BUILD)
        show_confirmation(user_id)
    elif message.text == "üìå –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é":
        set_user_state(user_id, BotState.WAITING_MANUAL_ADDRESS)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚ùå –û—Ç–º–µ–Ω–∞")
        bot.send_message(
            user_id,
            "üìå –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ –Ω–∞—á–Ω–µ–º –º–∞—Ä—à—Ä—É—Ç:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ø–ª–æ—â–∞–¥—å –ú–∏–Ω–∏–Ω–∞ –∏ –ü–æ–∂–∞—Ä—Å–∫–æ–≥–æ\n‚Ä¢ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, —É–ª. –ë–æ–ª—å—à–∞—è –ü–æ–∫—Ä–æ–≤—Å–∫–∞—è, 1\n‚Ä¢ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –í–æ–∫–∑–∞–ª",
            reply_markup=markup
        )
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã—à–µ ‚¨ÜÔ∏è")


@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == BotState.WAITING_GEOLOCATION)
def handle_geolocation(message):
    user_id = message.from_user.id
    logger.debug(f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING_GEOLOCATION –æ—Ç {user_id}")
    
    if message.text == "üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º":
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        bot.send_message(user_id, "üìç –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º' –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        set_user_state(user_id, BotState.WAITING_LOCATION)
        markup = create_location_keyboard()
        bot.send_message(
            user_id,
            "üß≠ –û—Ç–∫—É–¥–∞ –Ω–∞—á–Ω–µ–º –ø—É—Ç—å?",
            reply_markup=markup
        )
    else:
        logger.debug(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {message.text}")
        bot.send_message(user_id, "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞'")


@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == BotState.WAITING_MANUAL_ADDRESS)
def handle_manual_address(message):
    user_id = message.from_user.id
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        set_user_state(user_id, BotState.WAITING_LOCATION)
        markup = create_location_keyboard()
        bot.send_message(
            user_id,
            "üß≠ –û—Ç–∫—É–¥–∞ –Ω–∞—á–Ω–µ–º –ø—É—Ç—å?",
            reply_markup=markup
        )
    else:
        user_data[user_id]['location'] = message.text
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∫–∞–∑–∞–ª –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é: {message.text}")
        set_user_state(user_id, BotState.READY_TO_BUILD)
        show_confirmation(user_id)


def parse_single_interest(text):
    interests_mapping = {
        'üèõÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
        'üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ': '–∏—Å–∫—É—Å—Å—Ç–≤–æ', 
        '‚òï –ö–∞—Ñ–µ –∏ –µ–¥–∞': '–∫–∞—Ñ–µ –∏ –µ–¥–∞',
        'üå≥ –ü–∞—Ä–∫–∏': '–ø–∞—Ä–∫–∏',
        'üì∑ –§–æ—Ç–æ-—Ç–æ—á–∫–∏': '—Ñ–æ—Ç–æ-—Ç–æ—á–∫–∏',
        'üé≠ –ò—Å—Ç–æ—Ä–∏—è': '–∏—Å—Ç–æ—Ä–∏—è',
        'üèûÔ∏è –ü—Ä–∏—Ä–æ–¥–∞': '–ø—Ä–∏—Ä–æ–¥–∞',
        'üé™ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        'üõçÔ∏è –®–æ–ø–∏–Ω–≥': '—à–æ–ø–∏–Ω–≥',
        'üèõÔ∏è –ú—É–∑–µ–∏': '–º—É–∑–µ–∏',
        'üé≠ –¢–µ–∞—Ç—Ä—ã': '—Ç–µ–∞—Ç—Ä—ã',
        'üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã'
    }
    
    return interests_mapping.get(text.strip(), None)

def parse_interests(text):
    interests_mapping = {
        'üèõÔ∏è': '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 'üé®': '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '‚òï': '–∫–∞—Ñ–µ',
        'üå≥': '–ø–∞—Ä–∫–∏', 'üì∑': '—Ñ–æ—Ç–æ', 'üé≠': '–∏—Å—Ç–æ—Ä–∏—è'
    }
    
    interests = []
    for emoji, interest in interests_mapping.items():
        if emoji in text:
            interests.append(interest)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —ç–º–æ–¥–∑–∏, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç
    if not interests:
        interests = [interest.strip() for interest in text.split(',')]
    
    return interests


def parse_time(text):
    numbers = re.findall(r'\d+\.?\d*', text)
    if numbers:
        return float(numbers[0])
    return None


def show_confirmation(user_id):
    data = user_data.get(user_id, {})
    
    location_str = data.get('location')
    if isinstance(location_str, dict):
        location_str = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location_str['lat']:.6f}, {location_str['lon']:.6f}"
    else:
        location_str = f"üìç –ê–¥—Ä–µ—Å: {location_str}"
    
    confirmation_text = f"""
‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:

üìå –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(data.get('interests', []))}
‚è∞ –í—Ä–µ–º—è: {data.get('time')} —á–∞—Å–∞
üß≠ –°—Ç–∞—Ä—Ç: {location_str}

–í—Å—ë –≤–µ—Ä–Ω–æ?
            """
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –î–∞, —Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç!", "‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    bot.send_message(user_id, confirmation_text, reply_markup=markup)


def _load_texts():
    try:
        with open('texts.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å texts.json: {e}")
        return {}

_TEXTS_CACHE = _load_texts()

def get_how_it_works_info():
    return _TEXTS_CACHE.get('how_it_works', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')


def get_examples_info():
    return _TEXTS_CACHE.get('examples', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')


def generate_yandex_maps_link(places, start_location):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
        points = []
        logger.debug(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç. start={start_location}")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É
        if isinstance(start_location, dict):
            points.append(f"{start_location['lat']},{start_location['lon']}")
        else:
            if(start_location == "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ø–ª–æ—â–∞–¥—å –ú–∏–Ω–∏–Ω–∞ –∏ –ü–æ–∂–∞—Ä—Å–∫–æ–≥–æ"):
                points.append("56.3287,44.0020")
            else:
                if(geocode_to_coordinates(start_location)):
                    start_location = geocode_to_coordinates(start_location)
                    points.append(f"{start_location['lat']},{start_location['lon']}")
                    logger.debug(f"–ì–µ–æ–∫–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω: {start_location}")
                else:
                    points.append("56.3287,44.0020")
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (—Å—Ç—Ä–æ–≥–æ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        for place in places:
            if 'lat' in place and 'lon' in place:
                points.append(f"{place['lat']},{place['lon']}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç
        points_str = "~".join(points)
        yandex_link = f"https://yandex.ru/maps/?rtext={points_str}&rtt=pd"
        
        return yandex_link
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç: {e}")
        return "https://yandex.ru/maps/nizhniy-novgorod/"


def generate_static_map_image(places, start_location):
    try:
        YANDEX_MAPS_API_KEY = os.getenv('YANDEX_MAPS_API_KEY', '').strip()
        
        points = []
        
        if isinstance(start_location, dict):
            start_lat, start_lon = start_location['lat'], start_location['lon']
        else:
            start_lat, start_lon = 56.3287, 44.0020
        
        points.append(f"{start_lat},{start_lon}")
        
        for place in places:
            if 'lat' in place and 'lon' in place:
                points.append(f"{place['lat']},{place['lon']}")
        
        points_str = "~".join(points)
        static_map_url = f"https://static-maps.yandex.ru/1.x/?l=map&pt={points_str}&size=600,400&z=13"
        
        return static_map_url
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–Ω–æ–π –∫–∞—Ä—Ç—ã: {e}")
        return None


def _extract_ordered_titles_from_plan(plan_text: str):
    try:
        lines = [l.strip() for l in plan_text.splitlines() if l.strip()]
        titles = []
        import re
        num_re = re.compile(r"^(\d+\D{0,3})\s*(.+)$")
        for i, line in enumerate(lines):
            m = num_re.match(line)
            if m:
                title = m.group(2).strip()
                titles.append(title)
        if not titles:
            for i, line in enumerate(lines):
                if line.startswith('üìç –ê–¥—Ä–µ—Å') and i > 0:
                    titles.append(lines[i-1])
        return [t for t in titles if t]
    except Exception:
        return []


def _filter_and_reorder_places_by_titles(places, ordered_titles):
    if not ordered_titles:
        return places
    title_to_place = {p.get('title'): p for p in places if p.get('title')}
    filtered = [title_to_place[t] for t in ordered_titles if t in title_to_place]
    return filtered


def send_route_with_maps(user_id, plan_text, places, start_location, type=None):
    try:
        bot.send_message(user_id, plan_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        logger.debug(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏: {start_location}")

        if type:
            tmp = start_location.split(", ")
            start_location = {'lat': float(tmp[0]), 'lon': float(tmp[1])}
            logger.debug(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏: {start_location}")
       
        ordered_titles = _extract_ordered_titles_from_plan(plan_text)
        places_for_maps = _filter_and_reorder_places_by_titles(places, ordered_titles)
        if not places_for_maps:
            places_for_maps = places

        yandex_link = generate_yandex_maps_link(places_for_maps, start_location)
        static_map_url = create_route_with_custom_style(places_for_maps, start_location)
        logger.debug(f"Static map URL: {static_map_url}")
        template = _TEXTS_CACHE.get('maps_message', '')
        maps_message = template.format(yandex_link=yandex_link)
        if static_map_url:
            try:
                bot.send_photo(user_id, static_map_url, caption=maps_message, parse_mode='HTML')
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                bot.send_message(user_id, maps_message, parse_mode='HTML')
        else:
            bot.send_message(user_id, maps_message, parse_mode='HTML')
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")



@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == BotState.READY_TO_BUILD)
def handle_confirmation(message):
    user_id = message.from_user.id
    
    if message.text == "‚úÖ –î–∞, —Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç!":
        remove_keyboard = types.ReplyKeyboardRemove()
        bot.send_message(user_id, "üîÑ –°–æ–∑–¥–∞—é —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", reply_markup=remove_keyboard)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞")
        
        data = user_data.get(user_id, {})
        location_data = data.get('location')
        if isinstance(location_data, dict):
            location_str = f"{location_data['lon']}, {location_data['lat']}"
        else:
            location_str = location_data
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ {user_id}: {data}")
        type = None
        try:
            if(55.307892 < float(location_data['lat']) < 57.307892):
                location_str = f"{location_data['lat']}, {location_data['lon']}"
                type = True
        except:
            pass
        
        try:
            plan, places, user_coords = create_tour_plan_with_data(
                ', '.join(data.get('interests', [])), 
                data.get('time'), 
                location_str
            )
            logger.info(f"–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è {user_id} —Å–æ–∑–¥–∞–Ω. –°—Ç–∞—Ä—Ç: {location_str}, —Ç–æ—á–µ–∫: {len(places)}")
            send_route_with_maps(user_id, plan, places, location_str, type)
            
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è {user_id}: {e}")
        
        set_user_state(user_id, BotState.START)
        start_handler(message)
    else:
        set_user_state(user_id, BotState.START)
        start_handler(message)


def start_handler(message):
    user_id = message.from_user.id
    set_user_state(user_id, BotState.START)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "üöÄ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç",
        "‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
        "‚≠ê –ü—Ä–∏–º–µ—Ä—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤"
    ]
    markup.add(*[types.KeyboardButton(text) for text in buttons])
    
    bot.send_message(user_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)


@bot.message_handler(commands=['cancel', 'stop'])
def cancel_handler(message):
    user_id = message.from_user.id
    set_user_state(user_id, BotState.START)
    bot.send_message(user_id, "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ /start")


@bot.message_handler(commands=['restart'])
def restart_handler(message):
    user_id = message.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    set_user_state(user_id, BotState.START)
    start_handler(message)


@bot.message_handler(commands=['data'])
def show_data_handler(message):
    user_id = message.from_user.id
    data = user_data.get(user_id, {})
    bot.send_message(user_id, f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {data}")


@bot.message_handler(content_types=['location'])
def handle_location_message(message):
    user_id = message.from_user.id
    current_state = get_user_state(user_id)
    
    logger.info(f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}: lat={message.location.latitude}, lon={message.location.longitude}")
    
    if current_state == BotState.WAITING_GEOLOCATION:
        user_data[user_id]['location'] = {
            'lat': message.location.latitude,
            'lon': message.location.longitude
        }
        set_user_state(user_id, BotState.READY_TO_BUILD)
        bot.send_message(user_id, "‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
        show_confirmation(user_id)
    else:
        bot.send_message(user_id, "üìç –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ' –≤ –º–µ–Ω—é –≤—ã—à–µ")


@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    current_state = get_user_state(user_id)
    
    if current_state == BotState.START:
        if message.text == "‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?":
            info_text = get_how_it_works_info()
            bot.send_message(user_id, info_text, parse_mode='HTML')
        elif message.text == "‚≠ê –ü—Ä–∏–º–µ—Ä—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤":
            examples_text = get_examples_info()
            bot.send_message(user_id, examples_text, parse_mode='HTML')
        else:
            bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ 'üöÄ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ ‚¨ÜÔ∏è")


if __name__ == "__main__":
    logger.info("Bot start working...")
    start_bot()