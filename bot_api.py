import datetime
import json
import logging
import math
import os
import pathlib
import re
from typing import Any, Dict, List, Optional, Tuple

import numpy as np
import requests
from openai import OpenAI
import config

logger = logging.getLogger("bot_api")

DEEPSEEK_API_KEY = getattr(config, 'DEEPSEEK_API_KEY', '').strip()
CHAT_MODEL = "deepseek-chat"
EMBED_MODEL = "text-embedding-3-small"
DEEPSEEK_BASE_URL = "https://api.deepseek.com"

INDEX_DIR = "./rag_index_mnn"
INDEX_META = pathlib.Path(INDEX_DIR) / "meta.json"
INDEX_EMB = pathlib.Path(INDEX_DIR) / "embeddings.npy"

MAX_RADIUS_KM = 6.0
WALK_SPEED_KMPH = 4.5
HEADERS_OSM = {"User-Agent": "nn-tour-rag/1.0 (demo)"}

_embs = None
_meta = None
_client = None

def get_client():
    global _client
    if _client is None:
        _client = OpenAI(
            api_key=DEEPSEEK_API_KEY or "invalid",
            base_url=DEEPSEEK_BASE_URL
        )
    return _client

def load_rag_once():
    global _embs, _meta
    if _embs is None or _meta is None:
        if not INDEX_EMB.exists() or not INDEX_META.exists():
            raise FileNotFoundError("RAG –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ nn_tour_rag.py")
        logger.info("–ó–∞–≥—Ä—É–∂–∞—é RAG –∏–Ω–¥–µ–∫—Å...")
        _embs = np.load(INDEX_EMB)
        _meta = json.loads(INDEX_META.read_text(encoding="utf-8"))
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(_meta)} –æ–±—ä–µ–∫—Ç–æ–≤")
    return _embs, _meta

def parse_point_str(s: str) -> Optional[Tuple[float, float]]:
    if not isinstance(s, str):
        return None
    s = s.strip()
    m = re.match(r"POINT\s*\(\s*([\-0-9\.]+)\s+([\-0-9\.]+)\s*\)", s, re.I)
    if m:
        lon, lat = float(m.group(1)), float(m.group(2))
        return (lat, lon)
    m2 = re.match(r"^\s*([\-0-9\.]+)\s*,\s*([\-0-9\.]+)\s*$", s)
    if m2:
        lat, lon = float(m2.group(1)), float(m2.group(2))
        return (lat, lon)
    return None

def geocode_address(addr: str) -> Optional[Tuple[float, float]]:
    try:
        r = requests.get(
            "https://nominatim.openstreetmap.org/search",
            params={"q": addr, "format": "json", "limit": 1},
            headers=HEADERS_OSM, timeout=15
        )
        if r.status_code == 200 and r.json():
            return (float(r.json()[0]["lat"]), float(r.json()[0]["lon"]))
    except Exception:
        pass
    return None

def ensure_user_coords(loc: str) -> Tuple[float, float]:
    pt = parse_point_str(loc)
    if pt:
        return pt
    try:
        from api_yandex import geocode_to_coordinates
        y = geocode_to_coordinates(loc)
        if y and isinstance(y, dict) and "lat" in y and "lon" in y:
            return (float(y["lat"]), float(y["lon"]))
    except Exception:
        pass
    g = geocode_address(loc)
    if g:
        return g
    return (56.3287, 44.0020)

def haversine_km(a: Tuple[float, float], b: Tuple[float, float]) -> float:
    lat1, lon1 = map(math.radians, a)
    lat2, lon2 = map(math.radians, b)
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    R = 6371.0
    h = (math.sin(dlat/2)**2 +
         math.cos(lat1)*math.cos(lat2)*math.sin(dlon/2)**2)
    return 2 * R * math.asin(math.sqrt(h))

def cosine_sim(a: np.ndarray, b: np.ndarray) -> float:
    denom = (np.linalg.norm(a) * np.linalg.norm(b))
    if denom == 0: return 0.0
    return float(np.dot(a, b) / denom)

def retrieve_candidates(interests: str, user_coords: Tuple[float, float], k: int) -> List[Dict[str, Any]]:
    embs, meta = load_rag_once()
    openai_client = OpenAI(api_key=(getattr(config, 'OPENAI_API_KEY', '').strip() or "invalid"))
    
    q = openai_client.embeddings.create(model=EMBED_MODEL, input=[interests]).data[0].embedding
    q = np.array(q, dtype=np.float32)
    scores = []
    for i, m in enumerate(meta):
        base = cosine_sim(q, embs[i])
        d = haversine_km(user_coords, (m["lat"], m["lon"]))
        geo_bonus = 0.08 if d <= MAX_RADIUS_KM else -min(0.25, (d - MAX_RADIUS_KM) / 30.0)
        scores.append(base + geo_bonus)
    order = np.argsort(scores)[::-1][:max(k*3, k)]
    near = [meta[i] | {"_score": float(scores[i]), "_dist_km": float(haversine_km(user_coords, (meta[i]["lat"], meta[i]["lon"])))} for i in order]
    near.sort(key=lambda x: (x["_dist_km"] > MAX_RADIUS_KM, -x["_score"]))
    return near[:k]

def nearest_neighbor_order(start: Tuple[float, float], pts: List[Tuple[float, float]]) -> List[int]:
    remaining = set(range(len(pts)))
    order, cur = [], start
    while remaining:
        j = min(remaining, key=lambda i: haversine_km(cur, pts[i]))
        order.append(j)
        cur = pts[j]
        remaining.remove(j)
    return order

def build_timeline(start: Tuple[float, float], places: List[Dict[str, Any]], hours_total: float) -> List[Dict[str, Any]]:
    points = [(p["lat"], p["lon"]) for p in places]
    order = nearest_neighbor_order(start, points)
    seq = [places[i] for i in order]
    walks = []
    prev = start
    for p in seq:
        d = haversine_km(prev, (p["lat"], p["lon"]))
        walks.append(d); prev = (p["lat"], p["lon"])
    walk_min = [int(round(km / WALK_SPEED_KMPH * 60)) for km in walks]
    total_walk = sum(walk_min)
    n = len(seq)
    minutes_total = int(round(hours_total * 60))
    minutes_for_visits = max(20*n, minutes_total - total_walk)
    per_visit = max(15, int(minutes_for_visits / n))
    plan = []
    for i, p in enumerate(seq):
        if walk_min[i] > 0:
            plan.append({
                "type": "walk",
                "to": p["title"],
                "minutes": walk_min[i],
                "dist_km": round(walks[i], 2)
            })
        plan.append({
            "type": "visit",
            "title": p["title"],
            "address": p["address"],
            "minutes": per_visit,
            "url": p.get("url", ""),
            "why_hint": p["description"][:500]
        })
    return plan

def write_plan_with_llm(interests: str, hours: float, user_location_str: str, user_coords: Tuple[float, float], selected_places: List[Dict[str, Any]], timeline: List[Dict[str, Any]]) -> str:
    client = get_client()
    sys = (
        "–¢—ã ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É. –°—Ñ–æ—Ä–º–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–æ–≥—É–ª–∫–∏: "
        "5 –º–µ—Å—Ç, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ ‚Äî 1‚Äì2 —Ñ—Ä–∞–∑—ã ¬´–ø–æ—á–µ–º—É —Å—é–¥–∞¬ª, –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ—Ä—è–¥–æ–∫, –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏. "
        "–°—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞; –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, —Å–ø–∏—Å–∫–∞–º–∏. –ï—Å–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω–µ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞ –≤—ã–¥–∞–≤–∞–π –æ—à–∏–±–∫—É"
        "–ü—Ä–µ–¥–ª–∞–≥–∞–π –º–µ—Å—Ç–∞ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –≤ –∫–∞–∫–æ–º –Ω—É–∂–Ω–æ –µ–≥–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å, —Ç–æ–µ—Å—Ç—å —Å—Ä–∞–∑—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏—à–Ω–µ–µ —Ä–∞—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–ª–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏"
        "–°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ [#, *, **]"
        "–î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –¥–ª—è –±–æ–ª–µ–µ —è—Ä–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"
        "–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:" 
        """–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å–∫–æ–ª—å–∫—É –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å —à–æ–ø–∏–Ω–≥–æ–º, —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ üõçÔ∏è

–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç –ø–ª–æ—â–∞–¥–∏ –ú–∏–Ω–∏–Ω–∞ –∏ –ü–æ–∂–∞—Ä—Å–∫–æ–≥–æ. –í–æ—Ç –≤–∞—à –ø–ª–∞–Ω –Ω–∞ 3 —á–∞—Å–∞:

1Ô∏è‚É£  –¢–æ—Ä–≥–æ–≤—ã–π –¥–æ–º –°.–ú. –†—É–∫–∞–≤–∏—à–Ω–∏–∫–æ–≤–∞ (—Ñ–∞–±—Ä–∏–∫–∞ ¬´–ú–∞—è–∫¬ª)
üèõÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ –≤ –≥–æ—Ç–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ –æ—Ç –∑–Ω–∞–º–µ–Ω–∏—Ç–æ–≥–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –®–µ—Ö—Ç–µ–ª—è
üí∞ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –º–µ—Å—Ç–æ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –∫—É–ø–µ—á–µ—Å—Ç–≤–∞
üìç –ê–¥—Ä–µ—Å: –ù–∏–∂–Ω–µ-–í–æ–ª–∂—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, 11

2Ô∏è‚É£  –ö–æ–ª–µ—Å–æ –û–±–æ–∑—Ä–µ–Ω–∏—è
üé° –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ 50-–º–µ—Ç—Ä–æ–≤–æ–µ –∫–æ–ª–µ—Å–æ —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ –Ω–∞ –≥–æ—Ä–æ–¥
‚òï –£ –æ—Å–Ω–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ñ–µ–π–Ω—è —Å —Ä–æ–±–æ—Ç–æ–º-–æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º
üìç –ê–¥—Ä–µ—Å: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –°—Ç–∞—Ä—ã–π –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥

3Ô∏è‚É£  –¢—Ä–∞–º–ø–ª–∏–Ω
‚õ∑Ô∏è –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç 1958 –≥–æ–¥–∞, –æ–¥–∏–Ω –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≤ –ï–≤—Ä–æ–ø–µ
üèÖ –ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–Ω–∞–º–µ–Ω–∏—Ç—ã—Ö —Å–æ–≤–µ—Ç—Å–∫–∏—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤
üìç –ê–¥—Ä–µ—Å: –∫—Ä–µ—Å–µ–ª—å–Ω—ã–π –ø–æ–¥—ä—ë–º–Ω–∏–∫

4Ô∏è‚É£  –°—É–¥–µ–π—Å–∫–∞—è –≤—ã—à–∫–∞
üèóÔ∏è –Ø—Ä–∫–∏–π –ø—Ä–∏–º–µ—Ä –Ω–µ–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–∏–∑–º–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
üåÖ –ü–æ—Å–ª–µ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å –æ—Ç–∫—Ä—ã–ª–∏—Å—å –∫–∞—Ñ–µ –∏ —Å–º–æ—Ç—Ä–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞
üìç –ê–¥—Ä–µ—Å: –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –∫–∞–Ω–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞

–≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è! –ü—Ä–∏—è—Ç–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–∏! üòä"""

    )
    payload = {
        "interests": interests,
        "hours_available": hours,
        "user_location_input": user_location_str,
        "user_coords": user_coords,
        "places": [
            {
                "title": p["title"], "address": p["address"],
                "lat": p["lat"], "lon": p["lon"], "url": p.get("url", ""),
                "why": p["description"][:700]
            } for p in selected_places
        ],
        "timeline_raw": timeline
    }
    resp = client.chat.completions.create(
        model=CHAT_MODEL,
        messages=[
            {"role": "system", "content": sys},
            {"role": "user", "content": json.dumps(payload, ensure_ascii=False)}
        ]
    )
    return resp.choices[0].message.content.strip()

def decide_k(hours: float) -> int:
    if hours <= 1.5: return 3
    if hours <= 3.0: return 4
    return 5


def create_tour_plan(interests: str, hours: float, location: str) -> str:
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_coords = ensure_user_coords(location)
        
        # –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        k = decide_k(hours)
        candidates = retrieve_candidates(interests, user_coords, k)
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
        timeline = build_timeline(user_coords, candidates, hours)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞
        plan_text = write_plan_with_llm(interests, hours, location, user_coords, candidates, timeline)
        
        return plan_text
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}"


def create_tour_plan_with_data(interests: str, hours: float, location: str) -> tuple:
    try:
        user_coords = ensure_user_coords(location)
        
        k = decide_k(hours)
        candidates = retrieve_candidates(interests, user_coords, k)
        
        timeline = build_timeline(user_coords, candidates, hours)
        optimized_titles = [step["title"] for step in timeline if step.get("type") == "visit"]
        title_to_place = {p["title"]: p for p in candidates}
        ordered_places = [title_to_place[t] for t in optimized_titles if t in title_to_place]
        
        plan_text = write_plan_with_llm(interests, hours, location, user_coords, ordered_places, timeline)
        
        return plan_text, ordered_places, user_coords
        
    except Exception as e:
        error_message = str(e)
        
        if "Error code: 403" in error_message:
            error_code = 403
            if "unsupported_country_region_territory" in error_message:
                detailed_error = "–í–∫–ª—é—á–∏—Ç–µ VPN —É –±–æ—Ç–∞ —á—Ç–æ–±—ã –ò–ò —Ä–∞–±–æ—Ç–∞–ª –∏ –≤—ã–¥–∞–≤–∞–ª –º–∞—Ä—à—Ä—É—Ç, –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑–±–∞—Ä–æ—Ç—á–∏–∫–æ–º @Arz_solo_guitar"
            else:
                detailed_error = "–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑–±–∞—Ä–æ—Ç—á–∏–∫–æ–º @Arz_solo_guitar"
            
            return f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {detailed_error} (–ö–æ–¥: {error_code})", [], None
        else:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: {error_message}", [], None
